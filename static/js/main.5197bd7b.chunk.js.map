{"version":3,"sources":["components/TimeConverter.js","components/DailyCard.js","components/DayConverter.js","components/WeeklyForecast.js","components/UnixToDate.js","components/DailyOverviewContent.js","components/Header.js","components/App.js","index.js"],"names":["TimeConverter","sec","timestr","Date","toLocaleTimeString","slice","lastIndexOf","DailyCard","_ref","_ref$weather","weather","name","_ref$weather$weather$","dt","Object","slicedToArray","id","_ref$weather$sys","description","sys","sunrise","sunset","_ref$weather$main","main","temp","humidity","speed","wind","forecast","react_default","a","createElement","className","lib_default","iconId","toString","flip","rotate","DayConverter","toLocaleDateString","weekday","WeeklyCard","_ref$data","data","_ref$data$weather$","WeeklyForecast","props","filteredList","list","filter","element","dt_txt","includes","map","WeeklyForecast_WeeklyCard","UnixToDate","toISOString","substring","DailyOverViewCard","DailyOverviewContent","today","concat","DailyOverviewContent_DailyOverViewCard","Header","onClick","e","preventDefault","getWeather","App","state","lat","long","getPosition","navigator","geolocation","getCurrentPosition","position","_this","setState","coords","latitude","longitude","_callee","units","weatherResponse","forecastResponse","dailyWeather","forecastData","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","fetch","sent","json","stop","this","components_Header","components_DailyCard","components_DailyOverviewContent","components_WeeklyForecast","console","log","React","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.5197bd7b.chunk.js","sourcesContent":["const TimeConverter = (sec) => {\r\n    let date = new Date(sec * 1000);\r\n    let timestr = date.toLocaleTimeString('en-GB');\r\n    let formatedtime = timestr.slice(0, timestr.lastIndexOf(\":\"));\r\n    return formatedtime;\r\n  }\r\nexport default TimeConverter;\r\n\r\n","import React from \"react\";\r\nimport WeatherIcon from \"react-icons-weather\";\r\nimport TimeConverter from \"./TimeConverter\";\r\n\r\nconst DailyCard = ({\r\n  weather: {\r\n    name,\r\n    dt,\r\n    weather: [{ id, description }],\r\n    sys: { sunrise, sunset },\r\n    main: { temp, humidity },\r\n    wind: { speed }\r\n  },\r\n  forecast\r\n}) => {\r\n  return (\r\n    <div className=\"col s12 m4 offset-m1\">\r\n      <div className=\"card\" id=\"dailycard\">\r\n        <div className=\"card-content center-align\">\r\n          <span className=\"card-title\">{name}</span>\r\n          <WeatherIcon\r\n            name=\"owm\"\r\n            iconId={id.toString()}\r\n            flip=\"horizontal\"\r\n            rotate=\"90\"\r\n            id=\"dailyCardIcon\"\r\n          />\r\n          <p> Temperature: {temp} &#176; </p>\r\n          <p> Humidity: {humidity} %</p>\r\n          <p> Wind: {speed} </p>\r\n          <p> Sunset: {TimeConverter([sunset])}</p>\r\n          <p> Sunrise: {TimeConverter([sunrise])}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyCard;\r\n","const DayConverter = (sec) => {\r\n  let options = {weekday: 'long'}\r\n  let date = new Date(sec * 1000);\r\n  let timestr = date.toLocaleDateString('en-GB',options);\r\n  return timestr;\r\n}\r\n\r\nexport default DayConverter;","import React from \"react\";\r\nimport WeatherIcon from \"react-icons-weather\";\r\nimport DayConverter from \"./DayConverter\";\r\n\r\nconst WeeklyForecast = props => {\r\n  const filteredList = props.forecast.list\r\n    .filter(element => element.dt_txt.includes(\"12:00\"))\r\n    .map(element => <WeeklyCard data={element} />);\r\n    return <div className=\"row valign-wrapper\">{filteredList}</div>;\r\n\r\n};\r\n\r\nconst WeeklyCard = ({\r\n  data: {\r\n    dt,\r\n    main: { temp },\r\n    weather: [{ id, description }]\r\n  }\r\n}) => {\r\n  return (\r\n\r\n    <div className=\"col s2\">\r\n      <div className=\"card-panel center-align\">\r\n        <p>{DayConverter(dt)}</p>\r\n        <WeatherIcon\r\n          className=\"icon\"\r\n          name=\"owm\"\r\n          iconId={id.toString()}\r\n          flip=\"horizontal\"\r\n          rotate=\"90\"\r\n        />\r\n        <p>{temp} &#176;</p>\r\n        </div>\r\n      </div>\r\n\r\n  );\r\n};\r\n\r\nexport default WeeklyForecast;\r\n","const UnixToDate = (sec) => {\r\nlet date = new Date( 1000 * sec);\r\nlet formatedDate = date.toISOString().substring(0, 10);\r\nreturn formatedDate;\r\n\r\n}\r\n\r\nexport default UnixToDate;","import React from \"react\";\r\nimport WeatherIcon from \"react-icons-weather\";\r\nimport UnixToDate from \"./UnixToDate\";\r\nimport TimeConverter from \"./TimeConverter\";\r\n\r\nconst DailyOverviewContent = props => {\r\n  const today = UnixToDate(props.weather.dt);\r\n  const filteredList = props.forecast.list\r\n    .filter(element => element.dt_txt.includes(`${today}`))\r\n    .map(element => <DailyOverViewCard data={element} />);\r\n  return (\r\n    <div className=\"col s12 m6\">\r\n      <div className=\"card\">\r\n        <div className=\"card-content center-align\">\r\n          <span className=\"card-title\">Daily Overview</span>\r\n          {filteredList}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DailyOverViewCard = ({\r\n  data: {\r\n    dt,\r\n    main: { temp },\r\n    weather: [{ id }]\r\n  }\r\n}) => {\r\n  return (\r\n    <div>\r\n      <p>{TimeConverter(dt)}</p>\r\n      <div><WeatherIcon\r\n          className=\"icon\"\r\n          name=\"owm\"\r\n          iconId={id.toString()}\r\n          flip=\"horizontal\"\r\n          rotate=\"90\"\r\n        /></div>\r\n      <p>{temp} &#176;</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyOverviewContent;\r\n","import React from \"react\";\n\nconst Header = props => {\n  \n    return (\n      <nav>\n        <div className=\"nav-wrapper\">\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            <li>\n              <button\n                className=\"waves-effect waves-light btn-small\"\n                onClick={e => {\n                  e.preventDefault();\n                  props.getWeather(\"imperial\");\n                }}>\n                Imperial\n              </button>\n            </li>\n            <li>\n              <button\n                className=\"waves-effect waves-light btn-small\"\n                onClick={e => {\n                  e.preventDefault();\n                  props.getWeather(\"metric\");\n                }}>\n                Metric\n              </button>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  \n};\n\nexport default Header;\n","import React from \"react\";\nimport DailyCard from \"./DailyCard\";\nimport WeeklyForecast from \"./WeeklyForecast\";\nimport DailyOverviewContent from \"./DailyOverviewContent\";\nimport Header from \"./Header\";\n\nclass App extends React.Component {\n  state = {\n    lat: null,\n    long: null,\n    weather: null,\n    forecast: null\n  };\n\n  componentDidMount() {\n    this.getPosition();\n  }\n\n  getPosition = () => {\n    navigator.geolocation.getCurrentPosition(position =>\n      this.setState(\n        {\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        },\n        () => this.getWeather()\n      )\n    );\n  };\n\n  getWeather = async (units = \"metric\") => {\n    const weatherResponse = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${\n        this.state.lat\n      }&lon=${\n        this.state.long\n      }&appid=3b7e14abfb7372f6c8870898d5c70aa5&units=${units}`\n    );\n    const forecastResponse = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${\n        this.state.lat\n      }&lon=${\n        this.state.long\n      }&appid=3b7e14abfb7372f6c8870898d5c70aa5&units=${units}`\n    );\n    const dailyWeather = await weatherResponse.json();\n    const forecastData = await forecastResponse.json();\n\n    this.setState({ weather: dailyWeather, forecast: forecastData });\n  };\n\n  render() {\n    if (this.state.weather !== null) {\n      return (\n        <div className=\"container\">\n         <Header\n            forecast={this.state.forecast}\n            weather={this.state.weather}\n            getWeather={this.getWeather}\n          />\n          <div className=\"row\" id=\"daily-card-row\">\n            <DailyCard weather={this.state.weather} />\n            <DailyOverviewContent\n              forecast={this.state.forecast}\n              weather={this.state.weather}\n            />\n          </div>\n          <WeeklyForecast forecast={this.state.forecast} />\n          {console.log(this.state)}\n        </div>\n      );\n    } else {\n      return <div>Loading data</div>;\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}